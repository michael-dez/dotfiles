# Configures WSL Ubuntu environment
# Run with: ansible-playbook -i inventory install_ubuntu.yml
- hosts: localhost
  connection: local
  become: yes
  gather_facts: yes
  vars:
    packages:
      - build-essential
      - curl
      - git
      - tmux
      - unzip
      - wget
      - zsh
      - npm
  tasks:
    - name: "Arch: Upgrade all installed packages"
      become: yes
      pacman:
        update_cache: yes
        upgrade: yes
        when: ansible_facts['distribution'] == 'Archlinux'

    - name: "Arch: Install from package list"
      become: yes
      package:
        name: "{{ item }}"
        state: latest
        when: ansible_facts['distribution'] == 'Archlinux'
      with_items: "{{ lookup('file', 'bak/pacman-export.txt').splitlines() }}"

    - name: "Ubuntu: Update apt cache, install dependencies and upgrade all installed packages"
      apt:
        update_cache: yes
        state: latest
        name: "{{ packages }}"
        when: ansible_facts['distribution'] == 'Ubuntu'

    - name: "Ubuntu: Install brew"
      become: no
      shell: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        when: ansible_facts['distribution'] == 'Ubuntu'
      args:
        creates: /home/{{ ansible_user_id }}/.linuxbrew

    - name: "Ubuntu: Install neovim and terraform with brew"
      become: no
      shell: /home/{{ ansible_user_id }}/.linuxbrew/bin/brew install {{ item }}
        when: ansible_facts['distribution'] == 'Ubuntu'
      args:
        creates: "/home/{{ ansible_user_id }}/.linuxbrew/bin/{{ item }}"
      with_items:
        - nvim
        - terraform

    # Dotfile symlinking tasks
    - name: "Create symlinks for home directory dotfiles"
      become: no
      file:
        src: "{{ ansible_env.PWD }}/{{ item }}"
        dest: "{{ ansible_env.HOME }}/.{{ item }}"
        state: link
        force: yes
      with_items:
        - vimrc
        - tmux.conf
        - zshenv
        - zshrc
        - zshrc.pre-oh-my-zsh
        - p10k.zsh

    - name: "Create config directories for XDG config files"
      become: no
      file:
        path: "{{ ansible_env.HOME }}/.config/{{ item }}"
        state: directory
        mode: '0755'
      with_items:
        - nvim
        - picom
        - texinfo
        - xfce4/terminal
        - xfce4/xfconf/xfce-perchannel-xml

    - name: "Create symlinks for XDG config files"
      become: no
      file:
        src: "{{ ansible_env.PWD }}/{{ item.src }}"
        dest: "{{ ansible_env.HOME }}/.config/{{ item.dest }}"
        state: link
        force: yes
      with_items:
        - { src: "nvim/init.lua", dest: "nvim/init.lua" }
        - { src: "picom/picom.conf", dest: "picom/picom.conf" }
        - { src: "picom/picom-animations.conf", dest: "picom/picom-animations.conf" }
        - { src: "texinfo/infokey", dest: "texinfo/infokey" }
        - { src: "xfce4/terminal/terminalrc", dest: "xfce4/terminal/terminalrc" }
        - { src: "xfce4/terminal/accels.scm", dest: "xfce4/terminal/accels.scm" }
        - { src: "xfce4/xfconf/xfce-perchannel-xml/xfce4-terminal.xml", dest: "xfce4/xfconf/xfce-perchannel-xml/xfce4-terminal.xml" }
